name: Vulnerability Scan
run-name: 'Tests - ${{ inputs.oci-image-name }} - ${{ github.ref }}'

on:
  workflow_call:
    inputs:
      oci-image-name:
        description: 'Name of the image to be fetched and tested'
        required: true
        type: string
      oci-image-path:
        description: 'Path to the image in this repo (eg. "oci/foo")'
        required: true
        type: string
      date-last-scan:
        description: 'If there are new CVEs after this date, we notify'
        required: false
        type: string
        default: '9999-12-31T23:59:59'

env:
  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'

jobs:
  test-vulnerabilities:
    outputs:
      notify: ${{ steps.check-report.outputs.notify }}
      vulnerabilities: ${{ steps.check-report.outputs.vulnerabilities }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: scan
        run: |
          exit 0
      - name: Process report
        id: check-report
        if: ${{ !cancelled() }}
        run: |
          report="${{ github.workspace }}/report.json"
          echo "notify=false" >> "$GITHUB_OUTPUT"
          set -x
          vulnerabilities="$(jq -r -c '[
                  try(.scanner.result.Results[])
                  | .Target as $target
                  | .Vulnerabilities
                  | select(. != null)
                  | .[]
                  | {Target: $target, LastModifiedDate: .LastModifiedDate, VulnerabilityID: .VulnerabilityID,
                     PkgName: .PkgName, Severity: .Severity}
                ]' < $report)"
          echo "vulnerabilities=$vulnerabilities" >> "$GITHUB_OUTPUT"
          is_vulnerable=$(echo "$vulnerabilities" | jq -r 'length > 0')
          echo "is_vulnerable=$is_vulnerable" >> "$GITHUB_OUTPUT"
          echo "Is vulnerable: $is_vulnerable"
          last_modified_dates="$(echo "$vulnerabilities" | jq -r '.[] | select(.LastModifiedDate != null) | .LastModifiedDate')"
          cat "$GITHUB_OUTPUT"
          # We want to notify only if the CVEs have been updated since the last
          # time this scan ran
          for cve_updated in $last_modified_dates
          do
            if [[ "$cve_updated" > "${{ inputs.date-last-scan }}" ]]
            then
              echo "notify=true" >> "$GITHUB_OUTPUT"
              break
            fi
          done

  issue:
    runs-on: ubuntu-22.04
    name: Create issue
    env:
      GITHUB_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
    needs:
      - test-vulnerabilities
    if: ${{ !cancelled() }}
    steps:
      - uses: actions/checkout@v4

      - id: simplify-image-name
        run: |
          img_name=$(echo "${{ inputs.oci-image-name }}" | sed -r 's|.*/([a-zA-Z0-9-]+:[0-9.-]+)_[0-9]+|\1|')
          echo "img_name=$img_name" >> "$GITHUB_OUTPUT"

      # We assume that the sources within image.yaml are the same
      - name: Get image repo
        id: get-image-repo
        run: |
          img_repo=$(yq -r '.upload.[].source' ${{ github.workspace }}/${{ inputs.oci-image-path }}/image.yaml | head -n 1)
          echo "img-repo=$img_repo" >> "$GITHUB_OUTPUT"

      # We have to walk through the vulnerabilities since trivy does not support outputting the results as Markdown
      - name: Create Markdown Content
        id: create-markdown
        run: |
          set -x
          title="Vulnerabilities found for ${{ steps.simplify-image-name.outputs.img_name }}"
          echo "## $title" > issue.md
          echo "| ID | Target |Severity | Package |" >> issue.md
          echo "| -- | ----- | -------- | ------- |" >> issue.md
          echo '${{ needs.test-vulnerabilities.outputs.vulnerabilities }}' | jq -r '.[] | "| \(.VulnerabilityID) | /\(.Target) | \(.Severity) | \(.PkgName) |"' >> issue.md
          echo -e "\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> issue.md
          num_vulns=$(echo '${{ needs.test-vulnerabilities.outputs.vulnerabilities }}' | jq -r 'length')
          echo "issue-title=$title" >> "$GITHUB_OUTPUT"
          echo "issue-body-file=issue.md" >> "$GITHUB_OUTPUT"
          echo "vulnerability-exists=$([[ $num_vulns -gt 0 ]] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"

      - id: issue-exists
        run: |
          issue_number=$(gh issue list --repo ${{ steps.get-image-repo.outputs.img-repo }} --json "number,title" \
                  | jq -r '.[] | select(.title == "${{ steps.create-markdown.outputs.issue-title }}") | .number')
          echo "issue-exists=$([[ -n "$issue_number" ]] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          echo "issue-number=$issue_number" >> "$GITHUB_OUTPUT"


      # Truth table for issue creation
      # | issue-exists | notify | vulnerability-exists |   op   |
      # |--------------|--------|----------------------|--------|
      # |      T       |   T    |          T           | update |
      # |      T       |   T    |          F           |  never |
      # |      T       |   F    |          T           |   nop  |
      # |      T       |   F    |          F           |  close |
      # |      F       |   T    |          T           | create |
      # |      F       |   T    |          F           |  never |
      # |      F       |   F    |          T           | create |
      # |      F       |   F    |          F           |   nop  |
      
      - name: Create issue
        if: ${{ steps.create-markdown.outputs.vulnerability-exists == 'true' }}
        run: |
          set -x
          op=nop
          if [[ ${{ steps.issue-exists.outputs.issue-exists }}  == 'false' ]]; then
            op="create"
          elif [[ ${{ steps.issue-exists.outputs.issue-exists }} == 'true' \
                  && ${{ needs.test-vulnerabilities.outputs.notify }} == 'true' ]]; then
            op="edit ${{ steps.issue-exists.outputs.issue-number }}"
          fi
          if [[ $op != 'nop' ]]; then
            gh issue $op --repo ${{ steps.get-image-repo.outputs.img-repo }} \
              --title "Vulnerabilities found for ${{ steps.simplify-image-name.outputs.img_name }}" \
              --body-file "${{ steps.create-markdown.outputs.issue-body-file }}"
          fi

      - name: Close issue
        if: ${{ needs.test-vulnerabilities.result == 'success' && steps.issue-exists.outputs.issue-exists == 'true' && steps.create-markdown.outputs.vulnerability-exists == 'false' }}
        run: |
          gh issue close ${{ steps.issue-exists.outputs.issue-number }} --repo ${{ steps.get-image-repo.outputs.img-repo }}
